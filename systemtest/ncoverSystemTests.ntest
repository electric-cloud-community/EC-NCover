# -*-Perl-*-

# NCoverSystemTests.ntest -
#
# ECNCover
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use warnings;
use ECTest;
use ECSelenium;

 
# system tests


require "$::gTestFileDir/ncover-common.ntest";

$::gProjectImported = 0;
$::gtestProjectName = 'NCoverTestProject';

my $outcome = '';

########################################################################
# importProject - imports the test project and asserts that the specified
#                 procedures exists
#
# Arguments:
#   -none
#
# Returns:
#   -nothing
#
########################################################################
sub importProject() {
 
    #assert project exists and is imported
    assertOK($::N->import(
             { file =>"$::gTestFileDir/ncoverSystemTests.xml",
               path  => "/projects/NCoverTestProject",
               force => 1
             } ), 'import runCommandLine');
   
   #assert all given procedures exist
   
    assertOK($::N->getProcedure($::gtestProjectName, 'executeNCoverWithAdditionalOptions'),
    'executeNCoverWithAdditionalOptions procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'executeNCoverWithAllOptions'),
    'executeNCoverWithAllOptions procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'executeNCoverWithNoLogLevelAndNoMinimum'),
    'executeNCoverWithNoLogLevelAndNoMinimum procedure doesn\'t exist'); 

    assertOK($::N->getProcedure($::gtestProjectName, 'executeNCoverWithNormalLogLevelAndBuildID'),
    'executeNCoverWithNormalLogLevelAndBuildID procedure doesn\'t exist'); 
    
    assertOK($::N->getProcedure($::gtestProjectName, 'executeNCoverWithRequiredOptions'),
    'executeNCoverWithRequiredOptions procedure doesn\'t exist');
    
    $::gProjectImported = 1;
}

########################################################################
# doSetup - invokes the project import method in case it hasn't been 
#           executed
#
# Arguments:
#   -none
#
# Returns:
#   -nothing
#
########################################################################
sub doSetup() {

    if(! $::gProjectImported) {
        importProject();
    }
    
    
}

ntest "executeNCoverWithAdditionalOptions", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeNCoverWithAdditionalOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $consoleCommandLine = $xpath->findvalue("//property[propertyName='consoleCommandLine']/value");
      my $reportingCommandLine = $xpath->findvalue("//property[propertyName='reportingCommandLine']/value");
      
      my $workingDir = $xpath->findvalue("//property[propertyName='workingdir']/value");

      assertEq($consoleCommandLine, '"NCover.Console" //x "coverage.xml" //na "C:\Program Files\NCover\Samples\ConsoleApplication\bin\Debug\ConsoleTestApp.exe" -h', 
           'command line doesn\'t match expected output');
           
      assertEq($reportingCommandLine, '"NCover.Reporting" "coverage.xml" //ifb', 
           'command line doesn\'t match expected output');        
           
      assertEq($workingDir, '', 
           'working directory doesn\'t match expected output');

  };
  
ntest "executeNCoverWithAllOptions", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeNCoverWithAllOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $consoleCommandLine = $xpath->findvalue("//property[propertyName='consoleCommandLine']/value");
      my $reportingCommandLine = $xpath->findvalue("//property[propertyName='reportingCommandLine']/value");
      
      my $workingDir = $xpath->findvalue("//property[propertyName='workingdir']/value");

      assertEq($consoleCommandLine, '"NCover.Console" //x "mycoveragefile.xml" //reg //iis //ct "Branch,CyclomaticComplexity,Symbol,MethodVisits" //exclude-files "D:\castletech\operations\dev\ncover\resources\setting.cs" //exclude-methods ".*MyClass\.Method1" //project-name "AlonsoTest" //ll verbose //bi "B101" "C:\Program Files\NCover\Samples\ConsoleApplication\bin\Debug\ConsoleTestApp.exe" -h', 
           'command line doesn\'t match expected output');
           
      assertEq($reportingCommandLine, '"NCover.Reporting" "mycoveragefile.xml" //ifb //mc BranchCoverage:90 //mc CyclomaticComplexity:75 //mc SymbolCoverage:80 //mc MethodCoverage:85', 
           'command line doesn\'t match expected output'); 

      assertEq($workingDir, 'myworkingdir', 
           'working directory doesn\'t match expected output');

  };
  
  ntest "executeNCoverWithNoLogLevelAndNoMinimum", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeNCoverWithNoLogLevelAndNoMinimum",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $consoleCommandLine = $xpath->findvalue("//property[propertyName='consoleCommandLine']/value");
      my $reportingCommandLine = $xpath->findvalue("//property[propertyName='reportingCommandLine']/value");
      
      my $workingDir = $xpath->findvalue("//property[propertyName='workingdir']/value");

      assertEq($consoleCommandLine, '"NCover.Console" //x "coverage.xml" //iis //ll none "C:\Program Files\NCover\Samples\ConsoleApplication\bin\Debug\ConsoleTestApp.exe" -l', 
           'command line doesn\'t match expected output');
           
      assertEq($reportingCommandLine, '"NCover.Reporting" "coverage.xml"', 
           'command line doesn\'t match expected output'); 

  };
  
  ntest "executeNCoverWithNormalLogLevelAndBuildID", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeNCoverWithNormalLogLevelAndBuildID",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $consoleCommandLine = $xpath->findvalue("//property[propertyName='consoleCommandLine']/value");
      my $reportingCommandLine = $xpath->findvalue("//property[propertyName='reportingCommandLine']/value");
     
      my $workingDir = $xpath->findvalue("//property[propertyName='workingdir']/value");

      assertEq($consoleCommandLine, '"NCover.Console" //x "coverage.xml" //ll normal //bi "B500" "C:\Program Files\NCover\Samples\ConsoleApplication\bin\Debug\ConsoleTestApp.exe" -m', 
           'command line doesn\'t match expected output');
           
      assertEq($reportingCommandLine, '"NCover.Reporting" "coverage.xml"', 
           'command line doesn\'t match expected output'); 

  };
  
  ntest "executeNCoverWithRequiredOptions", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeNCoverWithRequiredOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $consoleCommandLine = $xpath->findvalue("//property[propertyName='consoleCommandLine']/value");
      my $reportingCommandLine = $xpath->findvalue("//property[propertyName='reportingCommandLine']/value");
      
      my $workingDir = $xpath->findvalue("//property[propertyName='workingdir']/value");

      assertEq($consoleCommandLine, '"NCover.Console" //x "coverage.xml" "C:\Program Files\NCover\Samples\ConsoleApplication\bin\Debug\ConsoleTestApp.exe"', 
           'command line doesn\'t match expected output');
           
      assertEq($reportingCommandLine, '"NCover.Reporting" "coverage.xml"', 
           'command line doesn\'t match expected output'); 

  };

